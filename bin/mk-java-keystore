#!/bin/bash

usage_and_exit() {
	echo "Usage: $0 [--random-pw] <crt-file> <key-file> <key-alias>" 1>&2
	echo "   <keystore-file> [chain-file ...]" 1>&2
	echo 1>&2
	echo "  --random-pw      Uses a random password for they keystore rather than asking" 1>&2
	echo "                   for one from the user. Cannot be used if <keystore-file>" 1>&2
	echo "                   already exists." 1>&2
	echo "  <crt-file>       The path to a X509 certificate to put in to the keystore" 1>&2
	echo "  <key-file>       The path to the private key file related to the certificate" 1>&2
	echo "  <key-alias>      The name of the key to use in the keystore" 1>&2
	echo "  <keystore-file>  The path to the keystore file to use and/or create. If the" 1>&2
	echo "                   alias already exists in the keystore, it will be deleted. If" 1>&2
	echo "                   using an existing keystore, you must provide the current" 1>&2
	echo "                   keystore password when prompted."
	echo "  <chain-file ...> Optional. Adds in a certificate chain. This/these file(s)" 1>&2
	echo "                   should contain the intermediate and root certificates in" 1>&2
	echo "                   PEM-encoded format"
	echo 1>&2
	echo "Note that the key and keystore will be created with the same password." 1>&2
	echo 1>&2
	exit 1;

}

# If we have no parameters...
if [ "x$1" == "x" ]; then
	usage_and_exit
fi

# Check for the random-pw parameter
PASSWORD=''
if [ "x$1" == "x--random-pw" ]; then
	# Generate a random password
	RANDOM_PASSWORD=1
	PASSWORD=`tr -dc A-Za-z0-9 < /dev/urandom | head -c 16`
	shift
fi

# Ensure we have all parameters (note the shift above)
if [ "x$1" == "x" ] || [ "x$2" == "x" ] || [ "x$3" == "x" ] || [ "x$4" == "x" ]; then
	usage_and_exit
fi

# Extract parameters
CERT_FILE=$1
KEY_FILE=$2
KEY_ALIAS=$3
KEYSTORE_FILE=$4

# Shift for certificate chain files to become $* / $@
shift 4

# Having a random password and an existing readable keystore doesn't make sense
if [ "x$RANDOM_PASSWORD" == "x1" ] && [ -r "$KEYSTORE_FILE" ]; then
	echo "Error: Random password (--random-pw) function cannot be used with an existing keystore." 1>&2
	exit 1;
fi

## Parameter verification ######################################################

# Ensure the certificate exists
if [ ! -r "$CERT_FILE" ]; then
	echo "Error: Error reading certificate file '$CERT_FILE'" 1>&2
	exit 2;
fi

# Ensure the key exists
if [ ! -r "$KEY_FILE" ]; then
	echo "Error: Error reading certificate file '$KEY_FILE'" 1>&2
	exit 2;
fi

# If a chain is provided, ensure it exists
if [ "x$*" != "x" ]; then
	for F in "$@"; do
		if [ ! -r "$F" ]; then
			echo "Error: Error reading chain file '$F'" 1>&2
		fi
	done
fi

## Locate binaries #############################################################

# Find the location of OpenSSL
OPENSSL=`which openssl 2>&1`

# Error is OpenSSL is not installed
if [ "x$?" != "x0" ]; then
	echo "Error: Could not find openssl binary. Ensure the openssl package is installed" 1>&2
	exit 3;
fi

# Find the location of the Java keytool command
KEYTOOL=`which keytool 2>&1`

# Error is keytool is not installed
if [ "x$?" != "x0" ]; then
	echo "Error: Could not find keytool binary. Ensure Java is installed" 1>&2
	exit 3;
fi

# Find the location of the dos2unix command
DOS2UNIX=`which dos2unix 2>&1`

# Error if dos2unix is not installed
if [ "x$?" != "x0" ]; then
	echo "Error: Could not find dos2unix binary. Ensure the dos2unix package is installed" 1>&2
	exit 3;
fi

## Interactive information gathering ###########################################

# Get a password
while (( ${#PASSWORD} < 6 )); do
	read -p "Key and keystore password: " -s PASSWORD
	echo
	if (( ${#PASSWORD} < 6 )); then
		echo "Error: password must be at least six characters" 2>&1
	fi
done

## Verify certificates #########################################################

# Verify the key and certificate match
echo "Verifying certificate and key moduli..."
CERT_MODULUS=$("$OPENSSL" x509 -in "$CERT_FILE" -noout -modulus)
KEY_MODULUS=$("$OPENSSL" rsa -in "$KEY_FILE" -noout -modulus)

if [ "$CERT_MODULUS" != "$KEY_MODULUS" ]; then
	echo "Modulus for certificate and key are different. Ensure that they specified key is the private key for the specified certificate" 1>&2
	exit 4;
fi

# Generate a temporary file for the PKCS12 stage
TEMP_PKCS12_FILE=`mktemp`

# If a chain is provided, build a temporary PEM, fixing normal issues
if [ "x$*" != "x" ]; then
	TEMP_CHAIN_FILE=`mktemp`
	for F in "$@"; do
		cat "$F" >> "$TEMP_CHAIN_FILE"
		"$DOS2UNIX" "$TEMP_CHAIN_FILE" >/dev/null 2>/dev/null
		echo "" >> "$TEMP_CHAIN_FILE"
	done
	CHAIN_PARAMS="-chain -CAfile $TEMP_CHAIN_FILE"
fi

# Make a PKCS12 file
echo "Making tempoary PKCS12 file..."
"$OPENSSL" pkcs12 -export -name "$KEY_ALIAS" -in "$CERT_FILE" -inkey "$KEY_FILE" -out "$TEMP_PKCS12_FILE" -passout "pass:$PASSWORD" $CHAIN_PARAMS >/dev/null

# If the keystore already exists, delete the certificate from the file
if [ -r "$KEYSTORE_FILE" ]; then
	echo "Checking for existing alias in existing keystore..."
	"$KEYTOOL" -list -keystore "$KEYSTORE_FILE" -alias "$KEY_ALIAS" -storepass "$PASSWORD" >/dev/null 2>/dev/null

	if [ "x$?" == "x0" ]; then
		echo "Removing existing key from keystore..."
		"$KEYTOOL" -delete -keystore "$KEYSTORE_FILE" -alias "$KEY_ALIAS" -storepass "$PASSWORD"
		RESULT=$?
		if [ "x$RESULT" != "x0" ]; then
			echo "Error: Failed to delete key from existing keystore. Keystore NOT updated" 1>&2
			rm -f "$TEMP_PKCS12_FILE" "$TEMP_CHAIN_FILE" >/dev/null
			exit $RESULT
		fi
	fi
fi

# Create/Update the keystore
echo "Updating keystore..."
"$KEYTOOL" -importkeystore -destkeystore "$KEYSTORE_FILE" -srckeystore "$TEMP_PKCS12_FILE" -srcstoretype pkcs12 -alias "$KEY_ALIAS" -srcstorepass "$PASSWORD" -deststorepass "$PASSWORD"
RESULT=$?
if [ "x$RESULT" != "x0" ]; then
	echo "Error: Failed to import key in to keystore" 1>&2
	rm -f "$TEMP_PKCS12_FILE" "$TEMP_CHAIN_FILE" >/dev/null
	exit $RESULT
fi

# Print out the password if we chose a random one
if [ "x$RANDOM_PASSWORD" == "x1" ]; then
	echo "New keystore password: $PASSWORD"
fi

# Tidy up
rm -f "$TEMP_PKCS12_FILE" "$TEMP_CHAIN_FILE" >/dev/null
